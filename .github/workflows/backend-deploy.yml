name: "backend-docker-build"

on:
  push:
    branches: [ "dev-be", "feature-be-#300" ]
    
jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # 노드 버전 설정 및 의존성 설치
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.17.1'

      - name: Corepack Enable
        run: corepack enable

      - name: Install Dependencies
        run: yarn install

      # 테스트 실행 (필요한 경우)
      # - name: Run Tests
      #   run: yarn test

  docker:
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./packages/backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/git-challenge-backend:0.1

  deploy:
    name: Deploy Backend Blue-Green
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: SSH and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BACKEND_SSH_HOST }}
          username: ${{ secrets.BACKEND_SSH_USERNAME }}
          password: ${{ secrets.BACKEND_SSH_PASSWORD }}
          port: ${{ secrets.BACKEND_SSH_PORT }}
          script: |
            CURRENT_STATE=$(curl -s http://${{ secrets.BLUE_GREEN_HOST }}:${{ secrets.BLUE_GREEN_PORT }}/status)
            echo "The current state is $CURRENT_STATE"
            docker image prune -f
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/git-challenge-backend:0.1
            if [ $CURRENT_STATE = "blue" ]; then
              docker run -d --name backend-green -p 8081:8080 \
                -v /${{ secrets.BACKEND_SSH_USERNAME }}/backend-logs:/app/packages/backend/logs/ \
                -e CONTAINER_GIT_USERNAME=${{ secrets.CONTAINER_GIT_USERNAME }} \
                -e MONGODB_HOST=${{ secrets.MONGODB_HOST }} \
                -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
                -e X_NCP_CLOVASTUDIO_API_KEY=${{ secrets.X_NCP_CLOVASTUDIO_API_KEY }} \
                -e X_NCP_APIGW_API_KEY=${{ secrets.X_NCP_APIGW_API_KEY }} \
                -e X_NCP_CLOVASTUDIO_REQUEST_ID=${{ secrets.X_NCP_CLOVASTUDIO_REQUEST_ID }} \
                -e CONTAINER_SERVER_HOST=${{ secrets.CONTAINER_SERVER_HOST }} \
                -e CONTAINER_POOL_MAX=${{ secrets.CONTAINER_POOL_MAX }} \
                ${{ secrets.DOCKERHUB_USERNAME }}/git-challenge-backend:0.1
              until [[ "$(curl -s http://localhost:8081/api/v1/health)" == "OK" ]]; do
                echo 'Waiting for the container to be ready...'
                sleep 5
              done
              docker rm -f backend-blue || true
              curl -X POST -H "Content-Type: application/json" \
                -d '{"status":"green"}' \
                http://${{ secrets.BLUE_GREEN_HOST }}:${{ secrets.BLUE_GREEN_PORT }}/status
            else
              docker run -d --name backend-blue -p 8080:8080 \
                -v /${{ secrets.BACKEND_SSH_USERNAME }}/backend-logs:/app/packages/backend/logs/ \
                -e CONTAINER_GIT_USERNAME=${{ secrets.CONTAINER_GIT_USERNAME }} \
                -e MONGODB_HOST=${{ secrets.MONGODB_HOST }} \
                -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
                -e X_NCP_CLOVASTUDIO_API_KEY=${{ secrets.X_NCP_CLOVASTUDIO_API_KEY }} \
                -e X_NCP_APIGW_API_KEY=${{ secrets.X_NCP_APIGW_API_KEY }} \
                -e X_NCP_CLOVASTUDIO_REQUEST_ID=${{ secrets.X_NCP_CLOVASTUDIO_REQUEST_ID }} \
                -e CONTAINER_SERVER_HOST=${{ secrets.CONTAINER_SERVER_HOST }} \
                -e CONTAINER_POOL_MAX=${{ secrets.CONTAINER_POOL_MAX }} \
                ${{ secrets.DOCKERHUB_USERNAME }}/git-challenge-backend:0.1
              until [[ "$(curl -s http://localhost:8080/api/v1/health)" == "OK" ]]; do
                echo 'Waiting for the container to be ready...'
                sleep 5
              done
              docker rm -f backend-green || true
              curl -X POST -H "Content-Type: application/json" \
                -d '{"status":"blue"}' \
                http://${{ secrets.BLUE_GREEN_HOST }}:${{ secrets.BLUE_GREEN_PORT }}/status
            fi

      - name: Update NGINX Configuration
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NGINX_SSH_HOST }}
          username: ${{ secrets.NGINX_SSH_USERNAME }}
          password: ${{ secrets.NGINX_SSH_PASSWORD }}
          port: ${{ secrets.NGINX_SSH_PORT }}
          script: |
            if [ "$CURRENT_STATE" = "green" ]; then
              sed -i 's/8080/8081/' /etc/nginx/sites-available/default
            else
              sed -i 's/8081/8080/' /etc/nginx/sites-available/default
            fi
            sudo nginx -s reload